'use client'

import {useRef, useEffect} from 'react';
import * as d3 from 'd3';

var graph = ({
  nodes: Array.from({length: 13}, () => ({})),
  links: [
    {source: 0, target: 1},
    {source: 1, target: 2},
    {source: 2, target: 0},
    {source: 1, target: 3},
    {source: 3, target: 2},
    {source: 3, target: 4},
    {source: 4, target: 5},
    {source: 5, target: 6},
    {source: 5, target: 7},
    {source: 6, target: 7},
    {source: 6, target: 8},
    {source: 7, target: 8},
    {source: 9, target: 4},
    {source: 9, target: 11},
    {source: 9, target: 10},
    {source: 10, target: 11},
    {source: 11, target: 12},
    {source: 12, target: 10}
  ]
})

var json = {
  nodes: [
    {name: 'twitter', image: '/images/twitter.ico', url: 'http://twitter.com/truesquared'},
    {name: 'github', image: '/images/github.ico', url: 'http://github.com/aierus'},
    {name: 'linkedin', image: '/images/linkedin.ico', url: 'https://www.linkedin.com/in/andy-clark3/'},
    {name: 'facebook', image: '/images/facebook.ico', url: 'https://www.facebook.com/andy.clark.507027/'},
    {name: 'boston college', image: '/images/bcw.png', url: 'https://www.bc.edu/'},
    {name: 'you', image: '/images/laptop.png', cl: 'you'},
    {name: 'debt collective', image: '/images/dc.png'},
    {name: 'goodreads', image: '/images/goodreads.ico', url: 'https://www.goodreads.com/user/show/134331947-andy-clark'}
  ],
  links: [
    {source: 1, target: 5, value: 1},
    {source: 2, target: 3, value: 1},
    {source: 3, target: 2, value: 6},
    {source: 1, target: 0, value: 4},
    {source: 2, target: 4, value: 2},
    {source: 2, target: 1, value: 2},
    {source: 0, target: 6, value: 5},
    {source: 1, target: 7, value: 5}

  ]
}

var clicks = 0
var svg = null

var rendered = false
var height = 300
var width = 500

const Graph = () => {
  const graphRef = useRef(null);

  useEffect(() => {
    const svg = d3.select(graphRef.current),
      link = svg.selectAll(".link")
        .data(json.links)
        .join("line")
        .classed("link", true),
      node = svg.selectAll(".node")
        .data(json.nodes)
        .enter().append("g")
        .attr("class", "node")
        .attr("class", function (d) {return d.cl})
        .on('dblclick', function (d) {window.open(d.url)})
        .classed("node", true)

    node.append('text')
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function (d) {return d.name});

    node.append("image")
      .attr("xlink:href", function (d) {return d.image})
      .attr("x", -8)
      .attr("y", -8)
      .attr("width", 16)
      .attr("height", 16);


    const simulation = d3.forceSimulation()
      .nodes(json.nodes)
      .force('x', d3.forceX(width / 2).strength(0.02))
      .force('y', d3.forceY(height / 2).strength(0.02))
      .force("charge", d3.forceManyBody().strength(-25))
      // .force("center", d3.forceCenter(width / 2, height / 2))
      .force("link", d3.forceLink(json.links).distance(120).strength(.75).iterations(10))
      .on("tick", tick);

    const drag = d3.drag()
      subject(({x, y}) => simulation.find(x - width / 2, y - height / 2, 40))
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);

    node.call(drag).on("click", click);

    function tick() {
      link.attr("x1", function (d) {return d.source.x;})
        .attr("y1", function (d) {return d.source.y;})
        .attr("x2", function (d) {return d.target.x;})
        .attr("y2", function (d) {return d.target.y;});

      node.attr("transform", function (d) {return "translate(" + d.x + "," + d.y + ")";});
    }

    function click(event, d) {
      delete d.fx;
      delete d.fy;
      d3.select(this).classed("fixed", false);
      simulation.alpha(1).restart();
    }

    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    // function dragstart() {
    //   d3.select(this).classed("fixed", true);
    // }

    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }

    // function dragged(event, d) {
    //   d.fx = clamp(event.x, 0, width);
    //   d.fy = clamp(event.y, 0, height);
    //   simulation.alpha(1).restart();
    // }

    function clamp(x, lo, hi) {
      return x < lo ? lo : x > hi ? hi : x;
    }

  })

  return <svg ref={graphRef} width="500" height="300" viewBox="0 0 600 350"></svg>;

  // return <svg ref={graphRef} width="500" height="300" viewBox="0 0 100 100"></svg>;
}

export default Graph;
